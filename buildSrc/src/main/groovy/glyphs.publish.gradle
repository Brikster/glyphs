plugins {
    id 'maven-publish'
    id 'signing'
}

publishing {
    repositories {
        maven {
            if (version.toString().endsWith("-SNAPSHOT")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = rootProject.hasProperty("ossrhUsername") ? findProperty("ossrhUsername") : System.getenv("OSSRH_USERNAME")
                password = rootProject.hasProperty("ossrhPassword") ? findProperty("ossrhPassword") : System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            if (findProperty("mavenArtifactId") != "glyphs-parent") {
                from components.java
            }
            artifactId = findProperty("mavenArtifactId")
            pom {
                name = "glyphs"
                description = "Library for convenient management of bitmap textures from Minecraft resourcepacks."
                url = "https://github.com/Brikster/glyphs"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Brikster'
                        name = 'Ilya Andreev'
                        email = 'mrbrikster@yandex.ru'
                    }
                }
                scm {
                    url = 'https://github.com/Brikster/glyphs'
                    connection = 'scm:git:git://github.com/Brikster/glyphs.git'
                    developerConnection = 'scm:git:git@github.com:Brikster/glyphs.git'
                }
            }
        }
    }
}

signing {
    if (!rootProject.hasProperty("signing.secretKeyRingFile")) {
        def key = System.getenv("SIGNING_SECRET_KEY")
        def password = System.getenv("SIGNING_PASSWORD")
        useInMemoryPgpKeys(key, password)
    }
    sign publishing.publications.maven
}
